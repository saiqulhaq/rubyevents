---
http_interactions:
- request:
    method: get
    uri: https://youtube.googleapis.com/youtube/v3/playlistItems?key=REDACTED_YOUTUBE_API_KEY&maxResults=50&part=snippet,contentDetails&playlistId=PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 06 Jun 2023 08:23:15 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "UoYg7rlP8imF2-MSyWhFOquagcc",
  "nextPageToken": "EAAaBlBUOkNESQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "99Wt-yAqLpb36R_LlVLpG_JzmnA",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Weaving and seaming mocks by Vladimir Dementyev",
        "description": "To mock or not mock is an important question, but let's leave it apart and admit that we, Rubyists, use mocks in our tests.\n\nMocking is a powerful technique, but even when used responsibly, it could lead to false positives in our tests (thus, bugs leaking to production): fake objects could diverge from their real counterparts.\n\nIn this talk, I'd like to discuss various approaches to keeping mocks in line with the actual implementation and present a brand new idea based on mock fixtures and contracts.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-ExPO-FCKQA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-ExPO-FCKQA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-ExPO-FCKQA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-ExPO-FCKQA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-ExPO-FCKQA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-ExPO-FCKQA"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "-ExPO-FCKQA",
        "videoPublishedAt": "2023-03-01T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "F7AngkyRA_6f2R7usu2q8UvgDrM",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: From Start to Published, Create a game with Ruby! by Cameron Gose",
        "description": "We'll be building a game in Ruby from start to finish using the DragonRuby GameToolkit. Finally we'll publish it so that your new creation can be shared.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-dz9KGYMT24/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-dz9KGYMT24/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-dz9KGYMT24/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-dz9KGYMT24/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-dz9KGYMT24/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-dz9KGYMT24"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "-dz9KGYMT24",
        "videoPublishedAt": "2023-03-01T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3emeYIANV_mTPV5Qyfxb53iK7OE",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Anyone Can Play Guitar (With Ruby) by Kevin Murphy",
        "description": "I've got the blues. I've been looking for the perfect guitar tone, but haven't found it. To amp up my mood, let's teach a computer to play the guitar through an amplifier.\n\nLet's string together object-oriented principles to orchestrate a blues shuffle. We'll model our domain with the help of inheritance, composition, and dependency injection. This talk will strike a chord with you, whether you've strummed a guitar before or not.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1fIPv-vOSj0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1fIPv-vOSj0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1fIPv-vOSj0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1fIPv-vOSj0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1fIPv-vOSj0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1fIPv-vOSj0"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "1fIPv-vOSj0",
        "videoPublishedAt": "2023-03-01T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GROMdhGBR5y1IuvHGSSlfDvCGyg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Ruby Office Hours with Shopify Engineering by Rose Wiegley, Ufuk Kayserilioglu",
        "description": "Curious about Shopify’s relationship with Ruby? Got questions on projects Shopify Ruby on Rails Engineers are currently working on? Join Rose Wiegley (Sr Staff Developer), Ufuk Kayserilioglu (Production Engineering Manager), and other Shopify Engineers for a 30-minute office hours session dedicated to answering your questions on Ruby, Shopify’s relationship with Ruby, and life at Shopify!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/37DkMimLG4A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/37DkMimLG4A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/37DkMimLG4A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/37DkMimLG4A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/37DkMimLG4A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "37DkMimLG4A"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "37DkMimLG4A",
        "videoPublishedAt": "2023-03-01T16:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AgFPk0G3aeVN8vuROrWQXs2Ik1g",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Keynote: Learning DNS by Julia Evans",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HoG2T0aJvfY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HoG2T0aJvfY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HoG2T0aJvfY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HoG2T0aJvfY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HoG2T0aJvfY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HoG2T0aJvfY"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "HoG2T0aJvfY",
        "videoPublishedAt": "2023-03-01T16:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "t8ldIu5R_xT0EIDbteOReeQ9hYA",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Zen and the Art of Incremental Automation by Aji Slater",
        "description": "Automation doesn’t have to be all or nothing. Automating manual processes is a practice that one can employ via simple principles. Broad enough to be applied to a range of workflows, flexible enough to be tailored to an individual’s personal development routines; these principles are not in themselves complex, and can be performed regularly in the day to day of working in a codebase.\nLearn how to cultivate habits and a culture of incremental automation so even if the goal is not a full self-service suite of automated tools, your team can begin a journey away from friction and manual tasks.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/I2b1h1gVOfQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/I2b1h1gVOfQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/I2b1h1gVOfQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/I2b1h1gVOfQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/I2b1h1gVOfQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "I2b1h1gVOfQ"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "I2b1h1gVOfQ",
        "videoPublishedAt": "2023-03-01T16:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ddJiquS_GuWi7ZT-WesOsptQ7kE",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Syntax Tree by Kevin Newton",
        "description": "Syntax Tree is a new toolkit for interacting with the Ruby parse tree. It can be used to analyze, inspect, debug, and format your Ruby code. In this talk we'll walk through how it works, how to use it in your own applications, and the exciting future possibilities enabled by Syntax Tree.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ieq6SKtYJD4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ieq6SKtYJD4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ieq6SKtYJD4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ieq6SKtYJD4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ieq6SKtYJD4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ieq6SKtYJD4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "Ieq6SKtYJD4",
        "videoPublishedAt": "2023-03-01T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Z9VJUZPVjNdJ1P_TnztkStGuyO4",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Lightning Talks",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IfzO_yyiYmw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IfzO_yyiYmw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IfzO_yyiYmw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IfzO_yyiYmw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IfzO_yyiYmw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IfzO_yyiYmw"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "IfzO_yyiYmw",
        "videoPublishedAt": "2023-03-01T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "G-R-odyya2YwOIHRTw3nFm4KXm0",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45NDk1REZENzhEMzU5MDQz",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Who Wants to be a Ruby Engineer? by Drew Bragg",
        "description": "Welcome to the Ruby game show where one lucky contestant tries to guess the output of a small bit of Ruby code. Sound easy? Here's the challenge: the snippets come from some of the weirdest parts of the Ruby language.  The questions aren't easy. Get enough right to be crowned a (some sort of something) Ruby Engineer and win a fabulous, mysterious prize.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JoZo9uGuXQw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JoZo9uGuXQw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JoZo9uGuXQw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JoZo9uGuXQw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JoZo9uGuXQw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JoZo9uGuXQw"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "JoZo9uGuXQw",
        "videoPublishedAt": "2023-03-01T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "x9y3Oe7tRLv53CopzmDt8qccjVk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5GNjNDRDREMDQxOThCMDQ2",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Keynote by Barbara Tannenbaum",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JpimJspmess/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JpimJspmess/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JpimJspmess/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JpimJspmess/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JpimJspmess/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JpimJspmess"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "JpimJspmess",
        "videoPublishedAt": "2023-03-01T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oTsrRUWa-r6MJLHt8O-MLEBJkIU",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay40NzZCMERDMjVEN0RFRThB",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Solo: Building Successful Web Apps By Your Lonesome by Jeremy Smith",
        "description": "Whether by choice or by circumstance, you may find yourself developing a web application alone. Congratulations! You've got the house to yourself and no one telling you what to do. But at the same time, there's no one to share the burden or make up for your shortcomings. How do you build well and ensure project success? We'll look at the pros and cons of working alone, what kinds of projects are well-suited to solo development, strategies for professional growth, and development and operational processes that will save you time and help you sleep better at night.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Rr871vmV4YM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Rr871vmV4YM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Rr871vmV4YM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Rr871vmV4YM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Rr871vmV4YM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Rr871vmV4YM"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "Rr871vmV4YM",
        "videoPublishedAt": "2023-03-01T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "gxQ5Y9fsQ2K5PE4Jthg3OVaESGg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5EMEEwRUY5M0RDRTU3NDJC",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Empathetic Pair Programming with Nonviolent Communication by Stephanie Minn",
        "description": "Pair programming is intimate. It’s the closest collaboration we do as software developers. When it goes well, it feels great! But when it doesn’t, you might be left feeling frustrated, discouraged, or withdrawn.\n\nTo navigate the vulnerability of sharing our keyboard and code, let’s learn about nonviolent communication (NVC), an established practice of deep listening to ourselves and others. We’ll cover real-life examples and how to apply the four tenets of NVC– observations, feelings, needs, and requests– to bring more joy and fulfillment the next time you pair.\nFeatured playlist",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Tzlyrra00Z0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Tzlyrra00Z0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Tzlyrra00Z0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Tzlyrra00Z0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Tzlyrra00Z0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Tzlyrra00Z0"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "Tzlyrra00Z0",
        "videoPublishedAt": "2023-03-01T16:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0DRfzJGpxjvWcJbuuLQYdpdDd7M",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45ODRDNTg0QjA4NkFBNkQy",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: TDD on the Shoulders of Giants by Jared Norman",
        "description": "Getting started with TDD is hard enough without having to also navigate a programming language barrier. Many of the best books on testing focus on very different languages like Java, making it tricky to apply their advice in Ruby, especially if you're new to testing. I'll go through the most important practices and techniques that we can pull from the testing literature and show how they can be applied in your day-to-day Ruby development. You'll learn how to make the most of testing in Ruby using the patterns, practices, and techniques that popularized TDD in the first place.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/V8Sx8h7KZZQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/V8Sx8h7KZZQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/V8Sx8h7KZZQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/V8Sx8h7KZZQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/V8Sx8h7KZZQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "V8Sx8h7KZZQ"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "V8Sx8h7KZZQ",
        "videoPublishedAt": "2023-03-01T16:00:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "vqoykdOoQ_baqk4WcPMRrkriX3s",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zMDg5MkQ5MEVDMEM1NTg2",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Crystal for Rubyists by Kirk Haines",
        "description": "Crystal is a Ruby-like compiled language that was originally built using Ruby. Its syntax is remarkably similar to Ruby's, which generally makes it straightforward for a Ruby programmer to start using Crystal. There are some notable, and interesting differences between the languages, however. In this workshop, let's learn some Crystal while we learn a little about the similarities and the differences between the two languages.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YmsSmp4yjOc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YmsSmp4yjOc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YmsSmp4yjOc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YmsSmp4yjOc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YmsSmp4yjOc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YmsSmp4yjOc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "YmsSmp4yjOc",
        "videoPublishedAt": "2023-03-01T16:00:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HK6fJy4zvsadqXB0wVuWc3f5blc",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41Mzk2QTAxMTkzNDk4MDhF",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: RubyGems.org MFA: The Past, Present and Future by Jenny Shen",
        "description": "What do Ruby’s rest-client, Python’s ctx, and npm’s ua-parser-js have in common? \n\nThey all suffered account takeovers that were preventable. Attackers aim to take control of a legitimate RubyGems.org user account and then use it to upload malicious code. It might dial home. It might steal your keys. Perhaps it will encrypt your disk. Or all of the above! Don’t you wish it couldn’t happen?\n\nMFA prevents 99.9% of account takeover attacks. Come learn about MFA, the history of RubyGems.org MFA support, the new MFA policy for top gems, and what’s on the horizon.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YxVGMvwJsHQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YxVGMvwJsHQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YxVGMvwJsHQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YxVGMvwJsHQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YxVGMvwJsHQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YxVGMvwJsHQ"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "YxVGMvwJsHQ",
        "videoPublishedAt": "2023-03-01T16:00:16Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xvriw902_sQZw7Kc3p0Wl8dLUA4",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5EQUE1NTFDRjcwMDg0NEMz",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: The Case Of The Vanished Variable - A Ruby Mystery Story by Nadia Odunayo",
        "description": "After a stressful couple of days at work, Deirdre Bug is looking forward to a quiet evening in. But her plans are thwarted when the phone rings. “I know I’m the last person you want to hear from…but...I need your help!” Follow Deirdre as she embarks on an adventure that features a looming Demo Day with serious prize money up for grabs, a trip inside the walls of one of the Ruby community’s most revered institutions, and some broken code that appears to be much more simple than meets the eye.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/a63aSvHu18c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/a63aSvHu18c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/a63aSvHu18c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/a63aSvHu18c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/a63aSvHu18c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "a63aSvHu18c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "a63aSvHu18c",
        "videoPublishedAt": "2023-03-01T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "GtarplSWuvMl6rZeKelYIYsGXvA",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41QTY1Q0UxMTVCODczNThE",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Splitwise Sponsor Session: Declare Victory with Class Macros by Jess Hottenstein",
        "description": "How can we write classes that are easy to understand? How can we write Ruby in a declarative way? How can we use metaprogramming without introducing chaos?\n\nCome learn the magic behind the first bit of metaprogramming we all encounter with Ruby - attr_reader. From there, we can learn how different gems use class macros to simplify our code. Finally, we’ll explore multiple ways we can make our own class macros to make our codebase easier to read and extend.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aMfHqajixeM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aMfHqajixeM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aMfHqajixeM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aMfHqajixeM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aMfHqajixeM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aMfHqajixeM"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "aMfHqajixeM",
        "videoPublishedAt": "2023-03-01T16:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "24YynYS69p7xRj6365Z8CVSBLxo",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yMUQyQTQzMjRDNzMyQTMy",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Keynote by Rose Wiegley",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/c_HhfehMBHE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/c_HhfehMBHE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/c_HhfehMBHE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/c_HhfehMBHE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/c_HhfehMBHE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "c_HhfehMBHE"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "c_HhfehMBHE",
        "videoPublishedAt": "2023-03-01T16:00:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cj3_BPTFFtVFwWgbAOs-zaCtISY",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45RTgxNDRBMzUwRjQ0MDhC",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConfMini 2022: The Three-Encoding Problem by Kevin Menard",
        "description": "You’ve probably heard of UTF-8 and know about strings, but did you know that Ruby supports more than 100 other encodings? In fact, your application probably uses three encodings without you realizing it. Moreover, encodings apply to more than just strings. In this talk, we’ll take a look at Ruby’s fairly unique approach to encodings and better understand the impact they have on the correctness and performance of our applications. We’ll take a look at the rich encoding APIs Ruby provides and by the end of the talk, you won’t just reach for force_encoding when you see an encoding exception.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/eoD0MsBpDXk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/eoD0MsBpDXk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/eoD0MsBpDXk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/eoD0MsBpDXk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/eoD0MsBpDXk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "eoD0MsBpDXk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "eoD0MsBpDXk",
        "videoPublishedAt": "2023-03-01T16:00:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mlK9HBlWwV8LkCcAUzes7ZbK0pE",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5ENDU4Q0M4RDExNzM1Mjcy",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Sponsor Panel",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/exxUz9k03s4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/exxUz9k03s4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/exxUz9k03s4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/exxUz9k03s4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/exxUz9k03s4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "exxUz9k03s4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "exxUz9k03s4",
        "videoPublishedAt": "2023-03-01T16:00:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "khRCm2VDvfpEChBsZlRTXZ6TWZ4",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yMDhBMkNBNjRDMjQxQTg1",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Here Be Dragons: The Hidden Gems of Tech Debt by Ernesto Tagwerker",
        "description": "How do you find the most unmaintainable code in your codebase? What will you prioritize in your next technical debt spike, and why? \n\nIn this talk you will learn how you can use RubyCritic, SimpleCov, Flog, Reek, and Skunk to slay dragons in your next refactoring adventure! Find out how the relationship between churn, complexity, and code coverage can give you a common language to talk about code quality and increase trust in your code.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fl-gbog_wtc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fl-gbog_wtc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fl-gbog_wtc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fl-gbog_wtc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fl-gbog_wtc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fl-gbog_wtc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "fl-gbog_wtc",
        "videoPublishedAt": "2023-03-01T16:00:31Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "tEmNN7s1u922AoOLXP1EZUNUvko",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5GM0Q3M0MzMzY5NTJFNTdE",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Podcast Panel",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/gOq7PJ-0ngA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/gOq7PJ-0ngA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/gOq7PJ-0ngA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/gOq7PJ-0ngA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/gOq7PJ-0ngA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "gOq7PJ-0ngA"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "gOq7PJ-0ngA",
        "videoPublishedAt": "2023-03-01T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "M1ChRm0mYeKfpMERlEV05lZD2lI",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zRjM0MkVCRTg0MkYyQTM0",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Looking Into Peephole Optimizations by Maple Ong",
        "description": "Did you know Ruby optimizes your code before executing it? If so, ever wonder how that works? The Ruby VM performs various optimizations on bytecode before executing them, one of them called peephole optimizations. Let’s learn about how some peephole optimizations work and how these small changes impact the execution of Ruby’s bytecode. Do these small changes make any impact on the final runtime? Let's find out - experience reading bytecode is not needed!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/l0YeRKkUU6c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/l0YeRKkUU6c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/l0YeRKkUU6c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/l0YeRKkUU6c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/l0YeRKkUU6c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "l0YeRKkUU6c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "l0YeRKkUU6c",
        "videoPublishedAt": "2023-03-01T16:00:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oX67mfqeY1duKIDZkqvGxGhUGlI",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45NzUwQkI1M0UxNThBMkU0",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini: How We Implemented Salary Transparency (And Why It Matters) by Hilary Stohs Krause",
        "description": "Depending on where you live, money can be a prickly topic in the workplace; however, survey after survey shows it’s also a conversation many employees actively want started. Data also shows that transparency around wages increases trust and job satisfaction and improves gender and racial salary equity.\n\nHowever, just because folks want something doesn’t mean getting there will be smooth sailing (as we discovered when we instituted wage transparency three years ago). In this talk, we’ll discuss why salary transparency matters, ways it can manifest, and how to pitch it to the rest of your company.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lTiVlylJxSY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lTiVlylJxSY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lTiVlylJxSY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lTiVlylJxSY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lTiVlylJxSY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lTiVlylJxSY"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "lTiVlylJxSY",
        "videoPublishedAt": "2023-03-01T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cS4B2oPvpJTFSAtPg96uzfFSBZQ",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DNzE1RjZEMUZCMjA0RDBB",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Start a Ruby Internship by Chelsea Kaufman and Adam Cuppy",
        "description": "Starting an internship doesn’t have to reduce your team's progress. On the contrary, a quality internship can benefit interns and senior folks. And, it doesn't take much to set up and start. We've done over 100!\n\nYou’ll use our established blueprint to draft a successful internship program throughout this workshop. We'll walk through all the planning phases and help you set up the templates so you're ready to make it a win for all involved and \"sell it\" to management. By the end, your internship program will be prepared to hit the ground running, so your interns will be productive on day one.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/m0VLrlcmyks/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/m0VLrlcmyks/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/m0VLrlcmyks/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/m0VLrlcmyks/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/m0VLrlcmyks/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "m0VLrlcmyks"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "m0VLrlcmyks",
        "videoPublishedAt": "2023-03-01T16:00:23Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CqEMw8wy7w_Wrd5pXTffP3V_YRU",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay43MTI1NDIwOTMwQjIxMzNG",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Knowing When To Walk Away by Lindsay Kelly",
        "description": "Picture this: the job you've always wanted. Doing exactly the kind of work you want. Having great coworkers and management. But then something shifts, and the dream becomes closer to a nightmare. How do you identify these things happening? How do you raise concerns in an appropriate way? And as a last resort, how do you know when it's the right choice to walk away?",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/qk30MqtCIMc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/qk30MqtCIMc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/qk30MqtCIMc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/qk30MqtCIMc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/qk30MqtCIMc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "qk30MqtCIMc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "qk30MqtCIMc",
        "videoPublishedAt": "2023-03-01T16:00:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-d91_PSbEUTjMPWJCjoBbNv6Gzg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DQ0MyQ0Y4Mzg0M0VGOEYw",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Functional programming for fun and profit!! by Jenny Shih",
        "description": "Functional programming brings you not just fun, but also profit! \n\nHave you ever felt curious towards functional programming (FP)? Were you, soon afterwards, intimidated by the mystic terms like monads and functors? Do you think FP is not related to your Ruby work and thus, useless? Guess what–you can actually apply FP to your Ruby projects and reap benefits from it before fully understanding what a monad is!\n\nThis talk will walk you through the powerful mental models and tools that FP gives us, and how we can readily use them to improve our apps in a language that we all love and understand.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/tQPmFQSI0lo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/tQPmFQSI0lo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/tQPmFQSI0lo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/tQPmFQSI0lo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/tQPmFQSI0lo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "tQPmFQSI0lo"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "tQPmFQSI0lo",
        "videoPublishedAt": "2023-03-01T16:00:35Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AV0wMT3VDzImiJ8LwqlQzhlweUo",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yQUE2Q0JEMTk4NTM3RTZC",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Teaching Ruby to Count by Joël Quenneville",
        "description": "Ruby has some of the best tooling in the business for working with iteration and data series. By leveraging its full power, you can build delightful interfaces for your objects.\n\nIn this case-study based presentation, we’ll explore a variety of problems such as composing Enumerable methods, generating a series of custom objects, and how to provide a clean interface for a collection with multiple valid traversal orders. Beyond just the beloved Enumerable module, this talk will take you into the world of Enumerators and Ranges and equip you to write objects that bring joy to your teammates.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yCiGMYzhlew/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yCiGMYzhlew/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yCiGMYzhlew/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yCiGMYzhlew/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yCiGMYzhlew/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yCiGMYzhlew"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "yCiGMYzhlew",
        "videoPublishedAt": "2023-03-01T16:00:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hjuKCZjiPxxlaD_EpCthhih4jTg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DMkU4NTY1QUFGQTYwMDE3",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: A Brewer’s Guide to Filtering out Complexity and Churn by Fito von Zastrow",
        "description": "Alan Ridlehoover, Fito von Zastrow\n\nMechanical coffee machines are amazing! You drop in a coin, listen for the clink, make a selection, and the machine springs to life, hissing, clicking, and whirring. Then the complex mechanical ballet ends, splashing that glorious, aromatic liquid into the cup. Ah! C’est magnifique!\n\nThere’s just one problem. Our customers also want soup! And, our machine is not extensible. So, we have a choice: we can add to the complexity of our machine by jamming in a new dispenser with each new request; or, we can pause to make our machine more extensible before development slows to a halt.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zHK1lYh4n-s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zHK1lYh4n-s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zHK1lYh4n-s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zHK1lYh4n-s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zHK1lYh4n-s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zHK1lYh4n-s"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "zHK1lYh4n-s",
        "videoPublishedAt": "2023-03-01T16:00:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "794OAPCMo8FiEB5dmPuGY0YI0gg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay44Mjc5REFBRUE2MTdFRDU0",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: We Need Someone Technical on the Call by Brittany Martin",
        "description": "A DM. The dreaded message. “They want someone technical on the call.”\n\nIf that statement is terrifying, never fear. Being effective at these interactions can be a big opportunity for your career. Learn tactics on when to commit to calls and how to execute them while empowering your team, conserving your time and acing the follow through.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zONREhN9wQg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zONREhN9wQg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zONREhN9wQg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zONREhN9wQg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zONREhN9wQg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zONREhN9wQg"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "zONREhN9wQg",
        "videoPublishedAt": "2023-03-01T16:00:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mGlT8piWaiZeWo-I3-BXXXF9_lA",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay43NDhFRTgwOTRERTU4Rjg3",
      "snippet": {
        "publishedAt": "2023-02-28T20:29:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf Mini 2022: Making .is_a? Fast by John Hawthorn",
        "description": "Until Ruby 3.2 the `is_a?` method can be a surprising performance bottleneck. It be called directly or through its various synonyms like case statements, rescue statements, protected methods, `Module#===` and more! Recently `is_a?` and its various flavours have been optimized and it's now faster and runs in constant time. Join me in the journey of identifying it as a bottleneck in production, implementing the optimization, squashing bugs, and finally turning it into assembly language in YJIT.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zcKbWXzopCU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zcKbWXzopCU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zcKbWXzopCU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zcKbWXzopCU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zcKbWXzopCU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zcKbWXzopCU"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "zcKbWXzopCU",
        "videoPublishedAt": "2023-03-01T16:00:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "cbpm5YKQmy7c3daE2Ibuh1wsCIs",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41QUZGQTY5OTE4QTREQUU4",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Lightning Talks",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-FM__GyT57Y/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-FM__GyT57Y/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-FM__GyT57Y/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-FM__GyT57Y/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-FM__GyT57Y/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-FM__GyT57Y"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "-FM__GyT57Y",
        "videoPublishedAt": "2023-03-07T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "70vjApDzyw71cU-a1kjzbffLp1M",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zRDBDOEZDOUM0MDY5NEEz",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Ruby Central Panel",
        "description": "",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0ItWcBK7pTk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0ItWcBK7pTk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0ItWcBK7pTk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0ItWcBK7pTk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0ItWcBK7pTk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0ItWcBK7pTk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "0ItWcBK7pTk",
        "videoPublishedAt": "2023-03-07T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FpYiU7IkQBwmg5jozynRbbSa14g",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5CMEQ2Mjk5NTc3NDZFRUNB",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Exit(ing) Through the YJIT by Eileen M Uchitelle",
        "description": "When optimizing code for the YJIT compiler it can be difficult to figure out what code is exiting and why. While working on tracing exits in a Ruby codebase, I found myself wishing we had a tool to reveal the exact line that was causing exits to occur. We set to work on building that functionality into Ruby and now we are able to see every side-exit and why. In this talk we’ll learn about side-exits and how we built a tracer for them. We’ll explore the original implementation, how we rewrote it in Rust, and lastly why it’s so important to always ask \"can I make what I built even better?\"",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EZEEl61bWSw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EZEEl61bWSw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EZEEl61bWSw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EZEEl61bWSw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EZEEl61bWSw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EZEEl61bWSw"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "EZEEl61bWSw",
        "videoPublishedAt": "2023-03-07T16:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nkSV-c7Apvy-MTn-0MzQhmD1q9o",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay42MTI4Njc2QjM1RjU1MjlG",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Crocheting & Coding: they're more similar than you think! by Tori Machen",
        "description": "Many of us have hobbies that we enjoy outside of our careers in tech. For me, that is amigurumi, the art of crocheting stuffed creatures. What if I told you that amigurumi is extremely similar to software development? Join me in exploring the intersection between crocheting amigurumi and developing software. We’ll look at the key similarities between these two crafts, and I’ll share how crocheting has helped me become a better software developer. You’ll walk away inspired to connect your own hobbies to your role in tech or find a new creative hobby (like crochet)!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GOnW_586TiU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GOnW_586TiU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GOnW_586TiU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GOnW_586TiU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GOnW_586TiU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GOnW_586TiU"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "GOnW_586TiU",
        "videoPublishedAt": "2023-03-07T16:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6W-DejCFpSfO0cZXtFKlFJdCkUY",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45RjNFMDhGQ0Q2RkFCQTc1",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Keynote: The Case Of The Vanished Variable - A Ruby Mystery Story by Nadia Odunayo",
        "description": "After a stressful couple of days at work, Deirdre Bug is looking forward to a quiet evening in. But her plans are thwarted when the phone rings. “I know I’m the last person you want to hear from…but...I need your help!” Follow Deirdre as she embarks on an adventure that features a looming Demo Day with serious prize money up for grabs, a trip inside the walls of one of the Ruby community’s most revered institutions, and some broken code that appears to be much more simple than meets the eye.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HSgY9o4gIPE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HSgY9o4gIPE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HSgY9o4gIPE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HSgY9o4gIPE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HSgY9o4gIPE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HSgY9o4gIPE"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "HSgY9o4gIPE",
        "videoPublishedAt": "2023-03-07T16:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rZ96Zxi2prLMlK7HfUITS8LIADU",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay40QTA3NTU2RkM1QzlCMzYx",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Eclectics Unite: Leverage Your Diverse Background by Sijia Wu",
        "description": "In addition to writing Ruby for work, I am also an academic translator, a snowboard instructor, and a drummer in a rock band. I am consistently amazed and inspired by the similarities and connections between software development and my seemingly unrelated experiences. What does translating science articles teach me about effectively using coding resources? How is playing drums in a rehearsal similar to test-driven development? How do I apply snowboard teaching principles to pair programming? Join me as I share my own story and explore ways you can leverage your diverse background.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/NGQzBjDWo-A/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/NGQzBjDWo-A/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/NGQzBjDWo-A/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/NGQzBjDWo-A/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/NGQzBjDWo-A/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "NGQzBjDWo-A"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "NGQzBjDWo-A",
        "videoPublishedAt": "2023-03-07T16:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9H0H_f9XGYlYxHTDLEXY7SuA-HA",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5BRjJDODk5REM0NjkzMUIy",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Keynote by Suzan Bond",
        "description": "Suzan Bond is a former COO of Travis CI, leadership consultant and executive coach. Her specialty is leaders at scaling startups. She's spent more than 15 years in technology. Her education background includes psychology, organization development, leadership and community organizing. Suzan facilitates workshops and is host of LeadDev's Bookmarked series. She's spoken at numerous events, is a contributor to Fast Company's Work Life section and writes the Suzan's Fieldnotes newsletter.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OqpBxSp-4FI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OqpBxSp-4FI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OqpBxSp-4FI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OqpBxSp-4FI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OqpBxSp-4FI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OqpBxSp-4FI"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "OqpBxSp-4FI",
        "videoPublishedAt": "2023-03-07T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nCp_5CbkGmHEgutiHEpEiAgqvjc",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xOTEzQzhBQzU3MDNDNjcz",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: How music works, using Ruby Thijs Cadier",
        "description": "That strange phenomenon where air molecules bounce against each other in a way that somehow comforts you, makes you cry, or makes you dance all night: music. Since the advent of recorded audio, a musician doesn't even need to be present anymore for this to happen (which makes putting \"I will always love you\" on repeat a little less awkward). Musicians and sound engineers have found many ways of creating music, and making it sound good. Some of their methods have become industry staples used on every recording released today. Let's look at what they do and reproduce some of their methods in Ruby!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RAtDPFsk3hc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RAtDPFsk3hc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RAtDPFsk3hc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RAtDPFsk3hc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RAtDPFsk3hc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RAtDPFsk3hc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "RAtDPFsk3hc",
        "videoPublishedAt": "2023-03-07T16:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "8i7fs8wU19ZQSd0Cearhc_3RaI0",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5GNDg1Njc1QzZERjlFRjE5",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "ubyConf 2022: The Magnitude 9.1 Meltdown at Fukushima by Nickolas Means",
        "description": "It was mid-afternoon on Friday, March 11, 2011 when the ground in Tōhoku began to shake. At Fukushima Daiichi nuclear power plant, it seemed like the shaking would never stop. Once it did, the reactors had automatically shut down, backup power had come online, and the operators were well on their way to having everything under control. And then the tsunami struck. They found themselves facing something beyond any worse-case scenario they imagined, and their response is a study in contrasts. We can learn a lot from the extremes they experienced about finding happiness and satisfaction at work.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RGS0jBMniag/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RGS0jBMniag/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RGS0jBMniag/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RGS0jBMniag/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RGS0jBMniag/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RGS0jBMniag"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "RGS0jBMniag",
        "videoPublishedAt": "2023-03-07T16:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ODMAWe6WY2xHSZR0UIGPohKbgRQ",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zQzFBN0RGNzNFREFCMjBE",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Don't @ me! Faster Instance Variables with Object Shapes by Aaron Patterson",
        "description": "Instance variables are a popular feature of the Ruby programming language, and many people enjoy using them. They are so popular that the Ruby core team has done lots of work to speed them up. But we can do even better to speed them up by using a technique called \"Object Shapes\". In this presentation we'll learn about what object shapes are, how they are implemented, how how they can be used to speed up getting and setting instance variables. We'll make sure to square up Ruby instance variable implementation details so that you can become a more well rounded developer!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ZaHd5MDJRBw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ZaHd5MDJRBw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ZaHd5MDJRBw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ZaHd5MDJRBw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ZaHd5MDJRBw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ZaHd5MDJRBw"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "ZaHd5MDJRBw",
        "videoPublishedAt": "2023-03-07T16:00:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uudP49482zhV5Qfc1OOE4x28UQw",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45NkVENTkxRDdCQUFBMDY4",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: scip-ruby - A Ruby indexer built with Sorbet by Varun Gandhi",
        "description": "scip-ruby is an open source indexer that lets you browse Ruby code online, with IDE functionality like “Go to definition” and “Find usages”. We originally built scip-ruby to improve Ruby support in Sourcegraph, a code intelligence platform. In this talk, you will learn how we built scip-ruby on top of Sorbet, a Ruby typechecker, and how scip-ruby compares to IDEs and other online code navigation tools. Along the way, we will discuss how quintessential ideas like layering code into a functional core and an imperative shell apply to developer tools, and enable easier testing.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cfceVH_1H3Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cfceVH_1H3Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cfceVH_1H3Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cfceVH_1H3Q/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cfceVH_1H3Q/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cfceVH_1H3Q"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "cfceVH_1H3Q",
        "videoPublishedAt": "2023-03-07T16:00:19Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "dN8ecQ9jUtWlSbI_772M6tGilhI",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DNkMwRUI2MkI4QkI4NDFG",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Building an education savings platform, with Ruby! by Tyler Ackerman",
        "description": "Wealthsimple Foundation is a Canadian charity working to enable a brighter future for everyone in Canada through access to post-secondary education. The Foundation is supported by Wealthsimple, which builds a variety of digital financial tools trusted by over 2.5 million Canadians. In this talk we'll go over: - How an organization supporting for-profit and non-profit activities is structured (and the ethical considerations that can arise from that) - Responsibilities of engineers working in a non-profit space - Opportunities and challenges of digital products addressing systematic inequalities",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/cmZKu-kyyio/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/cmZKu-kyyio/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/cmZKu-kyyio/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/cmZKu-kyyio/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/cmZKu-kyyio/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "cmZKu-kyyio"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "cmZKu-kyyio",
        "videoPublishedAt": "2023-03-07T16:00:31Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9QXe7h35TfARsd6kJ0P_Zybkx48",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5DRUQwODMxQzUyRTlGRkY3",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Static typing with RBS in Ruby by Gaurav Kumar Singh",
        "description": "In this talk, we'll generally explore the static type eco system in Ruby. Ruby has two main type checkers Sorbet and RBS. Sorbet was created by the Stripe and RBS is supported by ruby. Sorbet is an annotation base type checking system while RBS is a definition file-based type system. We'll add type annotation for a popular gem using sorbet and RBS and then compare the differences between the two systems. There is lot of interoperability announced between Sorbet and RBS and we'll explore if it's practically possible to convert a sorbet annotated project to RBS.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iKJeKxf3Nck/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iKJeKxf3Nck/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iKJeKxf3Nck/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iKJeKxf3Nck/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iKJeKxf3Nck/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iKJeKxf3Nck"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "iKJeKxf3Nck",
        "videoPublishedAt": "2023-03-07T16:00:31Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AGb0pR72TO47NMj8b6V8iYrhRsE",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41MzY4MzcwOUFFRUU3QzEx",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Helping Redistrict California with Ruby by Jeremy Evans",
        "description": "Every 10 years, after the federal census, California and most other states redraw the lines of various electoral districts to attempt to ensure the districts are fair and have roughly equal population. California uses a system written in Ruby for citizens to apply to become redistricting commissioners, and for review of the submitted applications. Come learn about redistricting and the unique design of the California redistricting commissioner application system, with 12 separate web server process types, isolated networks, 3-factor authentication, and other security features.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q5nke59IuAs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q5nke59IuAs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q5nke59IuAs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q5nke59IuAs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q5nke59IuAs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q5nke59IuAs"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "q5nke59IuAs",
        "videoPublishedAt": "2023-03-07T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hf9xJ6eOM4xiXZpuOZEsJi4H7Bk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yQUJFNUVCMzVDNjcxRTlF",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Solidarity not Charity and Collective Liberation by Mae Beale",
        "description": "Wondering how to get involved in supporting your communities? Hear from someone who has spun up (and down) multiple volunteer and service projects. May it spark your imagination -- and your heart -- to join or start helping out both this wild world and yourself. New mutual aid groups formed around the world in 2020. The tools were not ideal and the volume overwhelmed volunteers. A handful of of tech folx built a fit-to-suit app to manage immediate needs and maximize impact of partner mutual aid groups. Wins were achieved. Lessons were learned. And the interconnectedness of all things was felt.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/saPZ0Jh3UU0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/saPZ0Jh3UU0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/saPZ0Jh3UU0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/saPZ0Jh3UU0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/saPZ0Jh3UU0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "saPZ0Jh3UU0"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "saPZ0Jh3UU0",
        "videoPublishedAt": "2023-03-07T16:00:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "hbbplLcOqGIZYzC-oam_Ioj1z6g",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay40QzRDOEU0QUYwNUIxN0M1",
      "snippet": {
        "publishedAt": "2023-03-06T19:22:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: What does \"high priority\" mean? The secret to happy queues by Daniel Magliola",
        "description": "Like most web applications, you run important jobs in the background. And today, some of your urgent jobs are running late. Again. No matter how many changes you make to how you enqueue and run your jobs, the problem keeps happening. The good news is you're not alone. Most teams struggle with this problem, try more or less the same solutions, and have roughly the same result. In the end, it all boils down to one thing: keeping latency low. In this talk I will present a latency-focused approach to managing your queues reliably, keeping your jobs flowing and your users happy.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/w0Bl-5TDCC4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/w0Bl-5TDCC4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/w0Bl-5TDCC4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/w0Bl-5TDCC4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/w0Bl-5TDCC4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "w0Bl-5TDCC4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "w0Bl-5TDCC4",
        "videoPublishedAt": "2023-03-07T16:00:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "R3E2ZJ2mHwyEszDkTEyG73BAbkw",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41RTNBREYwMkI5QzU3RkY2",
      "snippet": {
        "publishedAt": "2023-03-06T20:11:50Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: RSpec: The Bad Parts by Caleb Hearth",
        "description": "RSpec is good, but it’s even better with less of it. Looking at a realistic example spec, we’ll learn why parts of RSpec like let, subject, shared_examples, behaves like, and before can make your tests hard to read, difficult to navigate, and more complex. We'll discuss when DRY is not worth the price and how we can avoid repetition without using RSpec's built-in DSL methods. In the end, we'll look at what's left. RSpec: The Good Parts.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_UFE0t2Sgaw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_UFE0t2Sgaw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_UFE0t2Sgaw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_UFE0t2Sgaw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_UFE0t2Sgaw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_UFE0t2Sgaw"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "_UFE0t2Sgaw",
        "videoPublishedAt": "2023-03-07T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HZHGUp5juf5QOlCATckQD7Caoyw",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5ENjI1QUI0MDI5NEQzODFE",
      "snippet": {
        "publishedAt": "2023-03-06T20:13:09Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Data indexing with RGB (Ruby, Graphs and Bitmaps) by Benjamin Lewis",
        "description": "In this talk, we will go on a journey through Zappi’s data history and how we are using Ruby, a graph database, and a bitmap store to build a unique data engine. A journey that starts with the problem of a disconnected data set and serialised data frames, and ends with the solution of an in-memory index. We will explore how we used RedisGraph to model the relationships in our data, connecting semantically equal nodes. Then delve into how a query layer was used to index a bitmap store and, in turn, led to us being able to interrogate our entire dataset orders of magnitude faster than before.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FwBRoxrHaBU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FwBRoxrHaBU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FwBRoxrHaBU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FwBRoxrHaBU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FwBRoxrHaBU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FwBRoxrHaBU"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "FwBRoxrHaBU",
        "videoPublishedAt": "2023-03-07T16:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MhXpRSNejYnNRiouWmK7OiCdiJ4",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay44QzVGQUU2QjE2NDgxM0M4",
      "snippet": {
        "publishedAt": "2023-03-06T20:14:14Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Bending Time with Crystal: 6 hours to 15 minutes by Paul Hoffer",
        "description": "In software, we often encounter problems that we accept as \"just how things are.\" But sometimes, that creates opportunities to identify creative, out of the box solutions. One idea can be combining the power of Crystal with our existing Ruby knowledge, to create effective tools with minimal learning curve and cognitive overhead. I'll demonstrate how easily Ruby code can be ported to Crystal, how it can benefit us, and how to identify these opportunities.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6MpXSrgBVww/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6MpXSrgBVww/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6MpXSrgBVww/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6MpXSrgBVww/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6MpXSrgBVww/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6MpXSrgBVww"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "6MpXSrgBVww",
        "videoPublishedAt": "2023-03-07T16:00:06Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 79,
    "resultsPerPage": 50
  }
}

  recorded_at: Tue, 06 Jun 2023 08:23:15 GMT
- request:
    method: get
    uri: https://youtube.googleapis.com/youtube/v3/playlistItems?key=REDACTED_YOUTUBE_API_KEY&maxResults=50&pageToken=EAAaBlBUOkNESQ&part=snippet,contentDetails&playlistId=PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Tue, 06 Jun 2023 08:23:15 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "4N7o-0E9fahEQZhctKuNzNE60Pg",
  "prevPageToken": "EAEaBlBUOkNESQ",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "rMz1jQjr0J-hmY7lRNoKSoRoA5I",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xMzgwMzBERjQ4NjEzNUE5",
      "snippet": {
        "publishedAt": "2023-03-06T20:16:02Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Splitting: the Crucial Optimization for Ruby Blocks by Benoit Daloze",
        "description": "Blocks are one of the most expressive parts of the Ruby syntax. Many Ruby methods take a block. When a method is given different blocks, there is a crucial optimization necessary to unlock the best performance. This optimization dates back to the early days of research on dynamic languages, yet it seems only a single Ruby implementation currently uses it. This optimization is called splitting and what it does is using different copies of a method and specialize them to the block given at different call sites. This enables compiling the method and the block together for the best performance.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/PjUpcR5UPHI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/PjUpcR5UPHI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/PjUpcR5UPHI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/PjUpcR5UPHI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/PjUpcR5UPHI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 50,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "PjUpcR5UPHI"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "PjUpcR5UPHI",
        "videoPublishedAt": "2023-03-07T16:00:23Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "p131K8sUlCQAhQ0HdjDLMBzzWcY",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zMEQ1MEIyRTFGNzhDQzFB",
      "snippet": {
        "publishedAt": "2023-03-06T20:17:41Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Building Stream Processing Applications with Ruby & Meroxa by Ali Hamidi",
        "description": "As the world moves towards real-time there’s a growing demand for building sophisticated stream processing applications. Traditionally building these apps has involved spinning up separate task-specific tooling, learning new and unfamiliar paradigms, as well as deploying and operating a constellation of complex services. In this talk, we’ll take a look at how to use the Turbine framework (turbine.rb) to build and deploy real-time stream processing applications using Ruby.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6bHZQy0Ti_c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6bHZQy0Ti_c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6bHZQy0Ti_c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6bHZQy0Ti_c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6bHZQy0Ti_c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 51,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6bHZQy0Ti_c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "6bHZQy0Ti_c",
        "videoPublishedAt": "2023-03-07T16:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jmtqeaQ12Crr_O--pqN6NwGn8nM",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay42Qzk5MkEzQjVFQjYwRDA4",
      "snippet": {
        "publishedAt": "2023-03-06T20:22:56Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Boot the backlog: Optimizing your workflow for dev happiness by Stacey McKnight",
        "description": "What would happen if your team dropped that standing Monday morning refinement meeting? Chaos? We often follow work processes because they’re “the way things are done”, but clunky, unexamined processes slow down even talented teams. Never ending backlogs make it hard to feel like you’re making progress. Frequent meetings break up focus. If something about the way we work doesn’t help us move more quickly or effectively, it’s time to rethink it. Seeking a better way to coordinate work across 3 continents, the Workforce.com dev team adopted the Shape Up approach to project management. This talk explores the core elements of that approach and ways to optimize developer happiness while delivering more value for users.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BB_GjUIA06c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BB_GjUIA06c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BB_GjUIA06c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BB_GjUIA06c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/BB_GjUIA06c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 52,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BB_GjUIA06c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "BB_GjUIA06c",
        "videoPublishedAt": "2023-03-07T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ctFuhR4a-mVN4_7MT6sc1lzHt6U",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41NTZEOThBNThFOUVGQkVB",
      "snippet": {
        "publishedAt": "2023-03-06T20:24:14Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Business in the Front, Party in the Back (Office) by Kevin Whinnery",
        "description": "If you have ever built a web application, chances are that you have also had to deal with \"the back office\" - the chores and one-off tasks required to operate your software in production. Workflows that aren't user-facing, like creating promo codes, moderating content, or running reports, are often a janky combination of admin scripts and spreadsheets. Retool helps developers quickly and easily solve these problems with software instead. In this session, we'll show how to build a back office interface for a Ruby on Rails application using Postgres and several common API services, so you can keep your focus on the business in the front, and let Retool help throw the party in the back (office).",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GSBhVVWycvU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GSBhVVWycvU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GSBhVVWycvU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GSBhVVWycvU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GSBhVVWycvU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 53,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GSBhVVWycvU"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "GSBhVVWycvU",
        "videoPublishedAt": "2023-03-07T16:00:07Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "b6UHNmjcAkukRFJv701fDMC0VT8",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay43NERCMDIzQzFBMERCMEE3",
      "snippet": {
        "publishedAt": "2023-03-06T20:26:14Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Analyzing an analyzer - A dive into how RuboCop works by Kyle d'Oliveira",
        "description": "To help us with aspects like linting, security or style, many of us have Rubocop analyzing our code. It's a very useful tool that is widely used, easy to set up and configure. Rubocop can even automatically auto-correct your source code as needed. How is this even possible? It turns out that Ruby is really good at taking Ruby code as input and doing various things based on that input. In this talk, I will go through some of the internals of Rubocop to show how it analyzes and makes changes to your source code.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pSCMgcttW4c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pSCMgcttW4c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pSCMgcttW4c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pSCMgcttW4c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pSCMgcttW4c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 54,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pSCMgcttW4c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "pSCMgcttW4c",
        "videoPublishedAt": "2023-03-07T16:00:34Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "o2soFULe2gRGAU2_L6NILDLtGBY",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5GNjAwN0Y0QTFGOTVDMEMy",
      "snippet": {
        "publishedAt": "2023-03-06T20:27:37Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Ruby Archaeology: Forgotten web frameworks by Nick Schwaderer",
        "description": "In the 2000's everyone was writing a Ruby web framework **Today, it seems, we are all too content to focus our energy on a small number of large Ruby web projects**. What happened to our creative spirit? In this talk we focus on Ruby web frameworks that have long gone by the wayside. I won't spoil them here, but I can tell you what we won't be covering: \n* Sinatra \n* Hanami \n* roda \n* merb \n\nWe will answer questions like: \n* Why are fewer people experimenting with their own frameworks today? \n* What features, idioms and ideas are worth exploring? \n* Are any of these frameworks worth reviving or copying?",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oXHgNh6DcSI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oXHgNh6DcSI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oXHgNh6DcSI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oXHgNh6DcSI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/oXHgNh6DcSI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 55,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oXHgNh6DcSI"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "oXHgNh6DcSI",
        "videoPublishedAt": "2023-03-07T16:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BUzkcwZXO0gahl5kT3TTydOqI0M",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5CQkEwRDA0MDkwNUM2MDY1",
      "snippet": {
        "publishedAt": "2023-03-06T20:36:10Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Ruby’s Core Gem by Chris Seaton",
        "description": "Ruby has a core library that is part of the interpreter and always available. It’s classes like String and Time. But what would it be like if we re-implemented the core library, writing it in Ruby itself, and made it available as a gem? Would it be faster or slower? Would it be easier to understand and debug? What other benefits could there be? It was originally Rubinius that implemented Ruby’s core in Ruby, and it has been taken up and maintained by the TruffleRuby team.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8mqDIHer1G4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8mqDIHer1G4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8mqDIHer1G4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8mqDIHer1G4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8mqDIHer1G4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 56,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8mqDIHer1G4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "8mqDIHer1G4",
        "videoPublishedAt": "2023-03-07T16:00:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "_S3hoOO8zqxTuFDUl7hVgQ9iNic",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4wNEU1MTI4NkZEMzVBN0JF",
      "snippet": {
        "publishedAt": "2023-03-06T20:37:17Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: I'm in love with Mermaid by Carolyn Cole",
        "description": "Everyone says that a picture is worth a thousand words... The issue in the past is that those pictures have been hard to create let alone maintain. Welcome Mermaid (https://mermaid-js.github.io/mermaid/#/)! Mermaid is a mark down compatible graphing tool that allows you to add diagrams directly to your markdown in github. I have been using it for a a year and just love it. I believe that you will love it too once you join my session.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/iFXomx3QLM4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/iFXomx3QLM4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/iFXomx3QLM4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/iFXomx3QLM4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/iFXomx3QLM4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 57,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "iFXomx3QLM4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "iFXomx3QLM4",
        "videoPublishedAt": "2023-03-07T16:00:18Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PR6bviy_aRKmQK_8vAyy35Xl_0Y",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4wMTYxQzVBRDI1NEVDQUZE",
      "snippet": {
        "publishedAt": "2023-03-06T20:38:36Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Discover Machine Learning in Ruby by Justin Bowen",
        "description": "We can use Ruby to do anything we as a community want. Today we’ll explore the work of a hidden gem of a contributor in our community, Andrew Kane, and their Ruby gems for Machine Learning. We will see how contemporary computer vision neural networks can run with Ruby. Ruby is all about developer happiness. Computer Vision is something that brings me great joy as it delivers satisfying visual feedback and connects our code with the real world through images and videos in a way that wasn’t accessible until the last decade or so.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HPbizNgcyFk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HPbizNgcyFk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HPbizNgcyFk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HPbizNgcyFk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HPbizNgcyFk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 58,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HPbizNgcyFk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "HPbizNgcyFk",
        "videoPublishedAt": "2023-03-07T16:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "H2GzhadGsof6Rlsap2kkq90Fxqc",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4zMUEyMkQwOTk0NTg4MDgw",
      "snippet": {
        "publishedAt": "2023-03-06T20:40:26Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Staff Engineer: “Here be dragons” by Alexandre Terrasa",
        "description": "“Here be dragons”: this is how uncharted areas of maps were marked in medieval times. Today, while the journey to become a Senior Engineer is known territory, being a Staff Engineer appears full of dragons. Together, let’s demystify what leading beyond the management track really means.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_7DOSoXICMo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_7DOSoXICMo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_7DOSoXICMo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_7DOSoXICMo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_7DOSoXICMo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 59,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_7DOSoXICMo"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "_7DOSoXICMo",
        "videoPublishedAt": "2023-03-07T16:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3WeMF1al3Agi9rr6NufUx9bGlwg",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay42QzdBMzlBQzQzRjQ0QkQy",
      "snippet": {
        "publishedAt": "2023-03-06T20:41:40Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Working Together: Pairing as Senior and Junior Developers by Kelly Ryan",
        "description": "Pairing with a senior developer is a daily necessity for a programmer just starting out. But how should you as a junior developer approach pairing to get the most out of the interaction? How can you not only find a solution to a current problem, but also build relationships and learn skills for future problems? In this talk, you will learn best practices for getting the most out of time with a mentor. I will recommend practical tips and positive habits, as well as ways of thinking that can improve your experience pairing and help you become a better developer.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pvl1HPFqRdk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pvl1HPFqRdk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pvl1HPFqRdk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pvl1HPFqRdk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pvl1HPFqRdk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 60,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pvl1HPFqRdk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "pvl1HPFqRdk",
        "videoPublishedAt": "2023-03-07T16:00:26Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "1qqpxfnEX2wsKlICWLFBm8NRWgQ",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay41OURENDc2NEM1MDI5Mjky",
      "snippet": {
        "publishedAt": "2023-03-06T20:43:12Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: From beginner to expert, and back again by Michael Toppa",
        "description": "\"In the beginner's mind there are many possibilities, in the expert's mind there are few.\" - Shunryu Suzuki, from \"Zen Mind, Beginner's Mind\" The Japanese Zen term shoshin translates as “beginner’s mind” and refers to a paradox: the more you know about a subject, the more likely you are to close your mind to further learning. In contrast, the beginner’s state of mind is judgment free. It’s open, curious, available, and present. We’ll draw on examples of these mindsets from fields as varied as aviation and geology, and discover lessons we can apply to the world of software development.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UcFBtBOo0dk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UcFBtBOo0dk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UcFBtBOo0dk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UcFBtBOo0dk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UcFBtBOo0dk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 61,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UcFBtBOo0dk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "UcFBtBOo0dk",
        "videoPublishedAt": "2023-03-07T16:00:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "p6rfbLyugSskqv8RyI0QPMFbCyk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4wRjhFM0MxMTU1MEUzQ0VB",
      "snippet": {
        "publishedAt": "2023-03-06T20:44:21Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Change the Climate Before Changing the Weather by Ben Greenberg",
        "description": "Unless you're self-employed you work for a system. That system is comprised of its own culture in decision making, inclusivity, and a lot more. As one person in a system how can you make an impact on it? Sometimes you can’t change the weather, but you can change the climate in your own room. You may even find that if you change the temperature in enough rooms, surprisingly, you end up changing the weather. In this talk, we’ll discuss a process of systems change that is ground up, going from the micro to the macro. You’ll leave more empowered to start changing the climate in your own workplace.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/OidmT2LhOdA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/OidmT2LhOdA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/OidmT2LhOdA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/OidmT2LhOdA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/OidmT2LhOdA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 62,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "OidmT2LhOdA"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "OidmT2LhOdA",
        "videoPublishedAt": "2023-03-07T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZI5Z6x7yL55xjqUFyJoizD4XOus",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5CNTZFOTNGQzZEODg1RUQx",
      "snippet": {
        "publishedAt": "2023-03-06T20:45:39Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Simulated Annealing: The Most Metal Algorithm Ever 🤘 by Chris Bloom",
        "description": "Simulated annealing is a fascinating algorithm that's designed to help find a particular type of solution (near-optimal, aka \"good enough\") to a particular type of problem (constrained optimization). It's inspired by the science of metallurgy, and because it's grounded in a real-world process I find it incredibly approachable. In this talk I'll explain in plain terms about what simulated annealing is, what a constrained optimization problem is, why you might want a \"good enough\" solution, and how we can use the Annealing gem to add simulated annealing to our Ruby apps.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/REMwU_dZ0ow/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/REMwU_dZ0ow/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/REMwU_dZ0ow/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/REMwU_dZ0ow/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/REMwU_dZ0ow/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 63,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "REMwU_dZ0ow"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "REMwU_dZ0ow",
        "videoPublishedAt": "2023-03-07T16:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "x4Fl9vrh877ljFLetXUGG9g8yjc",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5CNTcxMDQ0NThBNzMxODYz",
      "snippet": {
        "publishedAt": "2023-03-06T20:47:42Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Ruby Lambdas by Keith Bennett",
        "description": "Object Oriented Design is powerful for organizing software behavior, but without the benefit of lambdas' code-as-data flexibility, it often fails to reduce solutions to their simplest form. Although Ruby's Enumerable functionality is widely appreciated, its lambdas generally are not. This presentation introduces the developer to lambdas, and shows how they can be used to write software that is cleaner, simpler, and more flexible. We'll go through lots of code fragments, exploring diverse ways of exploiting their power and identifying reusable functional design patterns along the way.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/lxSoqjJSd38/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/lxSoqjJSd38/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/lxSoqjJSd38/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/lxSoqjJSd38/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/lxSoqjJSd38/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 64,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "lxSoqjJSd38"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "lxSoqjJSd38",
        "videoPublishedAt": "2023-03-07T16:00:23Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "5ebLxqfPAXTrB2n3S8QJrQ0HWY8",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5ERkUyQTM0MzEwQjZCMTY5",
      "snippet": {
        "publishedAt": "2023-03-06T20:49:27Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Building Native GUI Apps in Ruby by Andy Maleh",
        "description": "Ruby is an excellent choice for building desktop apps with a native GUI (Graphical User Interface) that looks familiar on Mac, Windows, and Linux. In fact, Ruby pushes the boundaries of developing such apps in brand new ways not seen in web development by supporting very lightweight and declarative GUI syntax including bidirectional data-binding, thanks to Glimmer DSL for LibUI, a gem that won a Fukuoka Ruby 2022 Special Award. In this talk, I will cover concepts like the GUI DSL, data-binding, custom controls, area graphics, drag & drop, MVC/MVP pattern, and scaffolding, with sample demos.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/w3tOrHDbbFA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/w3tOrHDbbFA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/w3tOrHDbbFA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/w3tOrHDbbFA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/w3tOrHDbbFA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 65,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "w3tOrHDbbFA"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "w3tOrHDbbFA",
        "videoPublishedAt": "2023-03-07T16:00:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qou9C_tpKnfZUCFiQvnXQYQK_Vk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xM0YyM0RDNDE4REQ1NDA0",
      "snippet": {
        "publishedAt": "2023-03-06T20:50:51Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: In Defense of Ruby Metaprogramming By Noel Rappin",
        "description": "If you’ve learned Ruby recently, you’ve likely been told to avoid using Ruby’s metaprogramming features because they are “dangerous”. Here at RubyConf, we laugh at danger. Or at least chuckle nervously at it. Ruby’s flexibility is one of the features that makes Ruby powerful, and ignoring it limits what you can do with the language. Plus, metaprogramming is fun. Let’s talk about when it makes sense to metaprogram, what parts of Ruby to use, and how to do it safely. You’ll leave with the tools to effectively metaprogram in your code.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/o1XvgJoH_tE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/o1XvgJoH_tE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/o1XvgJoH_tE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/o1XvgJoH_tE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/o1XvgJoH_tE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 66,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "o1XvgJoH_tE"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "o1XvgJoH_tE",
        "videoPublishedAt": "2023-03-07T16:00:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "j9ne2TVg5YeU65suwU7N8yE-Szc",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay42MjYzMTMyQjA0QURCN0JF",
      "snippet": {
        "publishedAt": "2023-03-06T20:52:17Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Pushing to master - adopting trunk based development by Dylan Blakemore",
        "description": "Trunk based development is a scary practice to adopt for engineers used to git flow or github flow. But there is ample evidence to show that it leads to higher quality code and faster delivery. So why are so many resistant to pushing to master? In this talk, we'll go over why TBD can be scary, what challenges are involved in pushing for team and company adoption, and how to overcome those challenges",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1sKFkV19XAc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1sKFkV19XAc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1sKFkV19XAc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1sKFkV19XAc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/1sKFkV19XAc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 67,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1sKFkV19XAc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "1sKFkV19XAc",
        "videoPublishedAt": "2023-03-07T16:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bVZUbZ_Mmx1RUt7Yam0MzuHeKN4",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay40MDNEMzA0QTBFRThFMzBE",
      "snippet": {
        "publishedAt": "2023-03-06T20:53:28Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Improving the development experience with language servers by Vinicius Stock",
        "description": "Providing a state of the art development experience greatly contributes to Ruby’s goal of making developers happy. A complete set of editor features can make a big difference in helping navigate and understand our Ruby code. Let’s explore a modern way of enhancing editor functionality: the language server protocol (LSP). What it is, how to implement it and how an LSP server like the Ruby LSP can make writing Ruby even better.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zxdb-xCcHdE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zxdb-xCcHdE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zxdb-xCcHdE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zxdb-xCcHdE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zxdb-xCcHdE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 68,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zxdb-xCcHdE"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "zxdb-xCcHdE",
        "videoPublishedAt": "2023-03-07T16:00:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2Y_BIkcvWQ0Fami6c1YnhmQTQrQ",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay42RTNCOEMxREI3Q0VDMjU2",
      "snippet": {
        "publishedAt": "2023-03-06T20:54:33Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: A Tale of Two Flamegraphs: Continuous Profiling in Ruby by Ryan Perry",
        "description": "This talk will dive deep into the internals of one of the fastest growing profiling gems: Pyroscope. Pyroscope is unique because it is actually a ruby gem of another ruby gem written in rust; Pyroscope extends the popular rbspy project as a foundation to not only collect profiling data, but also to tag and analyze that data as well. You can think of Pyroscope as what you would get if rbspy and speedscope had a baby. We’ll start with the internals and end with an example of how two flamegraphs can be used to tell a story about your applications performance.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8niNCkiF2Xo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8niNCkiF2Xo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8niNCkiF2Xo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8niNCkiF2Xo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8niNCkiF2Xo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 69,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8niNCkiF2Xo"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "8niNCkiF2Xo",
        "videoPublishedAt": "2023-03-07T16:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-P52iNM46Jr1aySYXyQXdkSCZ8E",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay43QzNCNkZENzIyMDY2MjZB",
      "snippet": {
        "publishedAt": "2023-03-06T20:55:41Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Everything a Microservice: The Worst Possible Intro to dRuby by Kevin Kuchta",
        "description": "Microservices are great, but I think we can all agree: we need more of them and they should be micro-er. What's the logical limit here? What if every object was remote in a language where everything's an object? Let's take a look at dRuby, the distributed programming module you've never heard of, and use it to achieve that deranged goal! You'll learn about a nifty little corner of the standard library while we attempt to reach the illogical conclusion of today's hottest architecture trend. Be warned: those sitting in the first few rows may get poorly-marshaled data on them.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nrJP9Qr2AXQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nrJP9Qr2AXQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nrJP9Qr2AXQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nrJP9Qr2AXQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nrJP9Qr2AXQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 70,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nrJP9Qr2AXQ"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "nrJP9Qr2AXQ",
        "videoPublishedAt": "2023-03-07T16:00:23Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uAm3Awqq2C_1CYi_ak7JJw-Uxlk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5EQkE3RTJCQTJEQkFBQTcz",
      "snippet": {
        "publishedAt": "2023-03-06T20:56:45Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: 1.5 is the Midpoint Between 0 and Infinity by Peter Zhu",
        "description": "What’s the midpoint between 0 and infinity? Well, the answer differs depending on whether you are asking a mathematician, philosopher, or a Ruby developer. I’m not a mathematician or a philosopher, but I am a Ruby developer, so I can tell you that 1.5 is the midpoint between 0 and infinity. In this talk, we'll discuss the binary search algorithm, IEEE 754 floating-point numbers, and a clever trick Ruby uses to perform binary search on floating-point ranges.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RQsH54GK85M/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RQsH54GK85M/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RQsH54GK85M/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RQsH54GK85M/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RQsH54GK85M/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 71,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RQsH54GK85M"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "RQsH54GK85M",
        "videoPublishedAt": "2023-03-07T16:00:15Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sVshbwWni4IvYLqN1qRyjGr1V_Q",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4yQzk4QTA5QjkzMTFFOEI1",
      "snippet": {
        "publishedAt": "2023-03-06T20:57:54Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Using JRuby: What, When, How, and Why by Charles Nutter",
        "description": "JRuby has just been updated for Ruby 3.1 support, bringing compatibility up to date for the most widely-deployed alternative Ruby implementation! This talk will teach you all about JRuby: what is it, when should you use it, how to get started and why it matters. Learn why Ruby shops around the world choose JRuby for world-class concurrency, GC, JIT, and cross-platform support.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/zLX9o_cEen4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/zLX9o_cEen4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/zLX9o_cEen4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/zLX9o_cEen4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/zLX9o_cEen4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 72,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "zLX9o_cEen4"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "zLX9o_cEen4",
        "videoPublishedAt": "2023-03-07T16:00:39Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6HzQo2Rln12OZz7iky--bEVD8jM",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay45NDlDQUFFOThDMTAxQjUw",
      "snippet": {
        "publishedAt": "2023-03-06T20:59:03Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Building a Commercial Game Engine using mRuby and SDL by Amir Rajan",
        "description": "What does it take to build a cross platform game engine in Ruby? How do you render to the screen? How is the simulation and rendering pipeline orchestrated? Why is Ruby a viable option is to begin with? These questions and more will be answered by Amir. Be a part of this renaissance and see how Ruby can be used for so much more than server side web development.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YVcl1Oy6QFM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YVcl1Oy6QFM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YVcl1Oy6QFM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YVcl1Oy6QFM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YVcl1Oy6QFM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 73,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YVcl1Oy6QFM"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "YVcl1Oy6QFM",
        "videoPublishedAt": "2023-03-07T16:00:28Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SNxev8mGur-PyTjOMkSyZH4eSAw",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xN0Y2QjVBOEI2MzQ5OUM5",
      "snippet": {
        "publishedAt": "2023-03-06T21:00:35Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Writing Ruby, just not in English! by Ratnadeep Deshmane (rtdp)",
        "description": "My talk shows how to write Ruby in a non-English language and the benefits of doing so. This will certainly be a great help for people who don’t speak English. It also helps get a better programming perspective for seasoned developers who don’t have English as their first language. I will also demo the tooling that I have developed, using which one can quickly create a new spoken language variant of Ruby and start programming in Spanish, Portuguese etc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/g8PgM5WGyhQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/g8PgM5WGyhQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/g8PgM5WGyhQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/g8PgM5WGyhQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/g8PgM5WGyhQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 74,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "g8PgM5WGyhQ"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "g8PgM5WGyhQ",
        "videoPublishedAt": "2023-03-07T16:00:33Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "k08SDPtfRK_Y1r4i2S4Icd_TCQU",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5FQUY2Qzk4RUFDN0ZFRkZF",
      "snippet": {
        "publishedAt": "2023-03-06T21:01:47Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: This Old App by Lori M Olson",
        "description": "What could renovating an old house have in common with upgrading an old app? *Everything!* Let me show you how this old house renovation project proceeds, from planning to scheduling, demolition to finishing, and how every stage directly relates the lessons learned from app upgrades over the course of my career.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-q9b5wlXr0c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-q9b5wlXr0c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-q9b5wlXr0c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-q9b5wlXr0c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-q9b5wlXr0c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 75,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-q9b5wlXr0c"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "-q9b5wlXr0c",
        "videoPublishedAt": "2023-03-07T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ivk8ch3iAMLJQbySQspMovzU7p0",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay5CMEVBRUJERkUyNTBENTkz",
      "snippet": {
        "publishedAt": "2023-03-06T21:02:48Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Never again without a contract: dry-validation by Espartaco Palma",
        "description": "The same as you shouldn't work without a contract, our systems should accept external inputs without one, a written, clear and enforceable one. Define the structure & expected payload being aware of their schema, structure & types. Using dry-schema or dry-validation this part is a matter of a few lines of codes covering most of the cases you may find with the cherry-on-top: error handling out-of-the-box and if this not enough with optional pattern matching for results.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_lMw7guragc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_lMw7guragc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_lMw7guragc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_lMw7guragc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_lMw7guragc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 76,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_lMw7guragc"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "_lMw7guragc",
        "videoPublishedAt": "2023-03-07T16:00:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Fpwzkk4RkOJYqOiFSQYd4PzbHAk",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay4xNjIyNEE0MDEyRDlCMjBE",
      "snippet": {
        "publishedAt": "2023-03-06T21:03:52Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: Boutique machine generated gems by CJ Avilla",
        "description": "What if writing boilerplate for Ruby gems were automated using familiar UI building blocks? Many Rubyists are familiar with components for generating clean HTML with higher-level frameworks. Unfortunately, many developers are unaware they can generate clean Ruby code that is as beautiful as their UIs. This talk will explore how we automatically created a generator to produce high-quality ruby and docs for a popular gem. I'll show how to use this approach to keep gems up-to-date with fast-moving APIs, release new versions frequently, and provide an excellent developer experience.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aV1obsuDmjU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aV1obsuDmjU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aV1obsuDmjU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aV1obsuDmjU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aV1obsuDmjU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 77,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aV1obsuDmjU"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "aV1obsuDmjU",
        "videoPublishedAt": "2023-03-07T16:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2JGEYLc7tB6I2mqIp4Z_XNZPDtM",
      "id": "UExFN3RRVWRSS2N5Wll6ME8zZDlaRGRvMC1Ca09XaHJTay44QTY2MEEzNzBFQUJCMUQ2",
      "snippet": {
        "publishedAt": "2023-03-06T21:06:22Z",
        "channelId": "UCWnPjmqvljcafA0z2U1fwKQ",
        "title": "RubyConf 2022: The Power of 'No' by Glenn Harmon",
        "description": "Have you ever attended a meeting that you wish you hadn’t? Have you ever been happy that plans were canceled because you never really wanted to go in the first place? Saying no is hard and can be truly challenging when faced with the prospect of feeling like maybe you’ll let someone down. Another reason saying no is hard is the feeling or FOMO, or the Fear Of Missing Out. All of these are even harder if you're a person of color. But is that 'Yes' worth your peace of mind? This talk is about how knowing when to say no and how to do so.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/q9Eoo5i6hmk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/q9Eoo5i6hmk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/q9Eoo5i6hmk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/q9Eoo5i6hmk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/q9Eoo5i6hmk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Confreaks",
        "playlistId": "PLE7tQUdRKcyZYz0O3d9ZDdo0-BkOWhrSk",
        "position": 78,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "q9Eoo5i6hmk"
        },
        "videoOwnerChannelTitle": "Confreaks",
        "videoOwnerChannelId": "UCWnPjmqvljcafA0z2U1fwKQ"
      },
      "contentDetails": {
        "videoId": "q9Eoo5i6hmk",
        "videoPublishedAt": "2023-03-07T16:00:27Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 79,
    "resultsPerPage": 50
  }
}

  recorded_at: Tue, 06 Jun 2023 08:23:15 GMT
recorded_with: VCR 6.1.0
